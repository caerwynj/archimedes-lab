REM > enum,ffb
REM generate all n-tuples, mixed radix
REM TAOCP 7.2.1.1 Algorithm M.
DIM code 256
FOR pass = 0 TO 3 STEP 3
P%=code
[
        OPT pass
        B start
.digits EQUD &00000000        ; *M1. Initialize.*
        EQUD &00000000        ; Memory for storing digits.
.radix  EQUD &03030303        ; Memory for radix of each digit.
        EQUD &03030303

.start  STMFD R13!,{R14}       ; Push link register onto stack.
        ADR R7,digits          ; Address of digits array.
        ADR R6,radix           ; Address of radix array.
        MOV R8,#4              ; $$n \gets $$ number of digits.
        MOV R12,#0
        MOV R0,#2              ; Initialize $$m_0 \gets 2$$.
        STRB R0,[R6]           

.h2     BL visit               ; *M2. Visit.* 
        MOV R3,R8              ; *M3. Prepare to add one.* $$j \gets n$$.

.h3     LDRB R0,[R7,R3]        ; *M4. Carry if necessary.* Fetch $$a_j$$.
        LDRB R1,[R6,R3]        ; Fetch $$m_j$$.
        SUB R1,R1,#1           ; 
        TEQ R0,R1              ; $$a_j = m_j - 1$$?
        STREQB R12,[R7,R3]     ; $$a_j \gets 0$$.
        SUBEQ R3,R3,#1         ; $$j \gets j - 1$$.
        BEQ h3

        CMP R3,#0              ; $$a_j = 0$$?
        BEQ exit               ; Then we're done.
        ADD R0,R0,#1           ; Otherwise $$a_j \gets a_j + 1$$
        STRB R0,[R7,R3]        ; *M5. Increase, unless done.*
        B h2

.exit   LDMFD R13!,{R14}       ; Pop link to caller from stack.
        MOV PC,R14             ; Return to the caller.

.visit  MOV R4,#0              
.h1     LDRB R0,[R7,R4]
        ADD R0,R0,#48
        SWI "OS_WriteC"        ; Print the digit.
        ADD R4,R4,#1
        CMP R4,R8
        BLE h1
        SWI "OS_NewLine"
        MOV PC,R14

]
NEXT pass
CALL code
